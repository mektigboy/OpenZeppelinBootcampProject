{
  "id": "e811b8035526b4a3e267ce12bc67d512",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.15",
  "solcLongVersion": "0.8.15+commit.e14f2714",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/RandomNFTGenerator.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\n/// @title Random NFT Generator \n/// @author antovanFI, Elizao, irwingtello, leandrogavidia, mektigboy\n/// @notice Generates NFTs with randomness, and store them in a decentralized way.\n/// @dev This contract utilizes Chainlink VRF v2 for randomness.\n/// URIs point to IPFS.\n/// Imports contracts from OpenZeppelin.\ncontract RandomNFTGenerator {\n}"
      },
      "contracts/Whitelist.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\n/// @title Whitelist \n/// @author antovanFI Elizao, irwingtello, leandrogavidia, mektigboy\n/// @notice ...\n/// @dev ...\ncontract Whitelist {\n}"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/RandomNFTGenerator.sol": {
        "RandomNFTGenerator": {
          "abi": [],
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212208b0736d667429327e0c86ec7612df6781d39a24f1cc1d85486690e6d476349b164736f6c634300080f0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 SMOD CALLDATASIZE 0xD6 PUSH8 0x429327E0C86EC761 0x2D 0xF6 PUSH25 0x1D39A24F1CC1D85486690E6D476349B164736F6C634300080F STOP CALLER ",
              "sourceMap": "374:31:0:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea26469706673582212208b0736d667429327e0c86ec7612df6781d39a24f1cc1d85486690e6d476349b164736f6c634300080f0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 SMOD CALLDATASIZE 0xD6 PUSH8 0x429327E0C86EC761 0x2D 0xF6 PUSH25 0x1D39A24F1CC1D85486690E6D476349B164736F6C634300080F STOP CALLER ",
              "sourceMap": "374:31:0:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"antovanFI, Elizao, irwingtello, leandrogavidia, mektigboy\",\"details\":\"This contract utilizes Chainlink VRF v2 for randomness. URIs point to IPFS. Imports contracts from OpenZeppelin.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Random NFT Generator \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Generates NFTs with randomness, and store them in a decentralized way.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomNFTGenerator.sol\":\"RandomNFTGenerator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RandomNFTGenerator.sol\":{\"keccak256\":\"0xd349b8611148d33f19e1b85e934c0951e194fbb9fb819783a8d1e09f3708a523\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a71f206809201de7ba8251c28f69da84ae47fb6fe36217460db66fcd9c056b39\",\"dweb:/ipfs/QmPtqk1pw8kCdfLmMqdBxAabfi32Xi1RexGSQiW8vsKt4Z\"]}},\"version\":1}"
        }
      },
      "contracts/Whitelist.sol": {
        "Whitelist": {
          "abi": [],
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220167e3308dc2032f1bf6d34db67c47edf75a9d93d6762cf78d9e235b1d0e69a2864736f6c634300080f0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 AND PUSH31 0x3308DC2032F1BF6D34DB67C47EDF75A9D93D6762CF78D9E235B1D0E69A2864 PUSH20 0x6F6C634300080F00330000000000000000000000 ",
              "sourceMap": "178:22:1:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220167e3308dc2032f1bf6d34db67c47edf75a9d93d6762cf78d9e235b1d0e69a2864736f6c634300080f0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 AND PUSH31 0x3308DC2032F1BF6D34DB67C47EDF75A9D93D6762CF78D9E235B1D0E69A2864 PUSH20 0x6F6C634300080F00330000000000000000000000 ",
              "sourceMap": "178:22:1:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"antovanFI Elizao, irwingtello, leandrogavidia, mektigboy\",\"details\":\"...\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Whitelist \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"...\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Whitelist.sol\":\"Whitelist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Whitelist.sol\":{\"keccak256\":\"0x2ce77e8b8450a80dcaa23ebd942d731c8e19cf9aba933c0166a00ae1cb4a487d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a724fefbe74d3b8b4d8543a46ce1a3d8d8dcc824d878e2348cf4fee76a63da69\",\"dweb:/ipfs/QmfNQhb8axGtpVYnQJNwWNrKE9nMFXX6XhkQ57uwCmB5iH\"]}},\"version\":1}"
        }
      }
    },
    "sources": {
      "contracts/RandomNFTGenerator.sol": {
        "ast": {
          "absolutePath": "contracts/RandomNFTGenerator.sol",
          "exportedSymbols": {
            "RandomNFTGenerator": [
              3
            ]
          },
          "id": 4,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".15"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "RandomNFTGenerator",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 2,
                "nodeType": "StructuredDocumentation",
                "src": "58:316:0",
                "text": "@title Random NFT Generator \n @author antovanFI, Elizao, irwingtello, leandrogavidia, mektigboy\n @notice Generates NFTs with randomness, and store them in a decentralized way.\n @dev This contract utilizes Chainlink VRF v2 for randomness.\n URIs point to IPFS.\n Imports contracts from OpenZeppelin."
              },
              "fullyImplemented": true,
              "id": 3,
              "linearizedBaseContracts": [
                3
              ],
              "name": "RandomNFTGenerator",
              "nameLocation": "383:18:0",
              "nodeType": "ContractDefinition",
              "nodes": [],
              "scope": 4,
              "src": "374:31:0",
              "usedErrors": []
            }
          ],
          "src": "32:373:0"
        },
        "id": 0
      },
      "contracts/Whitelist.sol": {
        "ast": {
          "absolutePath": "contracts/Whitelist.sol",
          "exportedSymbols": {
            "Whitelist": [
              7
            ]
          },
          "id": 8,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 5,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".15"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:1"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "Whitelist",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 6,
                "nodeType": "StructuredDocumentation",
                "src": "58:120:1",
                "text": "@title Whitelist \n @author antovanFI Elizao, irwingtello, leandrogavidia, mektigboy\n @notice ...\n @dev ..."
              },
              "fullyImplemented": true,
              "id": 7,
              "linearizedBaseContracts": [
                7
              ],
              "name": "Whitelist",
              "nameLocation": "187:9:1",
              "nodeType": "ContractDefinition",
              "nodes": [],
              "scope": 8,
              "src": "178:22:1",
              "usedErrors": []
            }
          ],
          "src": "32:168:1"
        },
        "id": 1
      }
    }
  }
}
