{
  "address": "0xc85ed190568E1542c9cb2f917bE383335716DE32",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxWhitelistedAddresses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxNFTLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxNFTLimitWhitelist",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "coordinator",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "string[3]",
          "name": "tokenURIs",
          "type": "string[3]"
        },
        {
          "internalType": "uint256",
          "name": "mintFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AbitoRandomNFTGenerator__AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AbitoRandomNFTGenerator__NotEnoughETHSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AbitoRandomNFTGenerator__RangeOutOfScope",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AbitoRandomNFTGenerator__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum AbitoRandomNFTGenerator.Selection",
          "name": "selection",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "NFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "NFTRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressToWhitelist",
          "type": "address"
        }
      ],
      "name": "addUserAddressToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxNumberOfWhitelistedAddresses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfWhitelistedAddresses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTokenURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whitelistedAddress",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNFTLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNFTLimitWhitelist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberOfWhitelistedAddresses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintWhitelist",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAddressesWhitelisted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressToRemove",
          "type": "address"
        }
      ],
      "name": "removeUserAddressFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requestIdToSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moddedRNG",
          "type": "uint256"
        }
      ],
      "name": "selectionFromModdedRNG",
      "outputs": [
        {
          "internalType": "enum AbitoRandomNFTGenerator.Selection",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setChanceArray",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whitelistedAddress",
          "type": "address"
        }
      ],
      "name": "verifyUserAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x39fb32a925aba13287c60a5f4f615d0836d5aecf6d965fb11836593ddcf6ef66",
  "receipt": {
    "to": null,
    "from": "0x7DE6670d8Cd2ae2b571169d57b348AeABAef3b02",
    "contractAddress": "0xc85ed190568E1542c9cb2f917bE383335716DE32",
    "transactionIndex": 15,
    "gasUsed": "5327953",
    "logsBloom": "0x
    "blockHash": "0x4e30bcb910191f413f1bedcf3afa114fb0ecefdfa13a4433b32adac407e567d1",
    "transactionHash": "0x39fb32a925aba13287c60a5f4f615d0836d5aecf6d965fb11836593ddcf6ef66",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 11151905,
        "transactionHash": "0x39fb32a925aba13287c60a5f4f615d0836d5aecf6d965fb11836593ddcf6ef66",
        "address": "0xc85ed190568E1542c9cb2f917bE383335716DE32",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007de6670d8cd2ae2b571169d57b348aeabaef3b02"
        ],
        "data": "0x",
        "logIndex": 44,
        "blockHash": "0x4e30bcb910191f413f1bedcf3afa114fb0ecefdfa13a4433b32adac407e567d1"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 11151905,
        "transactionHash": "0x39fb32a925aba13287c60a5f4f615d0836d5aecf6d965fb11836593ddcf6ef66",
        "address": "0xc85ed190568E1542c9cb2f917bE383335716DE32",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007de6670d8cd2ae2b571169d57b348aeabaef3b02",
          "0x0000000000000000000000007de6670d8cd2ae2b571169d57b348aeabaef3b02"
        ],
        "data": "0x",
        "logIndex": 45,
        "blockHash": "0x4e30bcb910191f413f1bedcf3afa114fb0ecefdfa13a4433b32adac407e567d1"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 11151905,
        "transactionHash": "0x39fb32a925aba13287c60a5f4f615d0836d5aecf6d965fb11836593ddcf6ef66",
        "address": "0xc85ed190568E1542c9cb2f917bE383335716DE32",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x0000000000000000000000007de6670d8cd2ae2b571169d57b348aeabaef3b02",
          "0x0000000000000000000000007de6670d8cd2ae2b571169d57b348aeabaef3b02"
        ],
        "data": "0x",
        "logIndex": 46,
        "blockHash": "0x4e30bcb910191f413f1bedcf3afa114fb0ecefdfa13a4433b32adac407e567d1"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 11151905,
        "transactionHash": "0x39fb32a925aba13287c60a5f4f615d0836d5aecf6d965fb11836593ddcf6ef66",
        "address": "0xc85ed190568E1542c9cb2f917bE383335716DE32",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000007de6670d8cd2ae2b571169d57b348aeabaef3b02",
          "0x0000000000000000000000007de6670d8cd2ae2b571169d57b348aeabaef3b02"
        ],
        "data": "0x",
        "logIndex": 47,
        "blockHash": "0x4e30bcb910191f413f1bedcf3afa114fb0ecefdfa13a4433b32adac407e567d1"
      }
    ],
    "blockNumber": 11151905,
    "cumulativeGasUsed": "11317632",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10",
    "20",
    "10",
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "9747",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "500000",
    [
      "ipfs://bafkreia35hmeoi2gbeib7louigapnicybxzhnu3ow7mrzjvjhy2lxh5nwq",
      "ipfs://bafkreiaulh6ope6bamhyhlzgwisc3djffjuclt5zxxamsypmqrulb3kkqa",
      "ipfs://bafkreiayes7ej5kzziio3fydpjjtdygtaxckjitka5z6txfgqgkfeticaq"
    ],
    "10000000000000000"
  ],
  "numDeployments": 4,
  "solcInputHash": "8a55410a6ca6326a929093cb4d2ab330",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWhitelistedAddresses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxNFTLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxNFTLimitWhitelist\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"string[3]\",\"name\":\"tokenURIs\",\"type\":\"string[3]\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AbitoRandomNFTGenerator__AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AbitoRandomNFTGenerator__NotEnoughETHSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AbitoRandomNFTGenerator__RangeOutOfScope\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AbitoRandomNFTGenerator__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AbitoRandomNFTGenerator.Selection\",\"name\":\"selection\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"NFTRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToWhitelist\",\"type\":\"address\"}],\"name\":\"addUserAddressToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxNumberOfWhitelistedAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfWhitelistedAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistedAddress\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNFTLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNFTLimitWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberOfWhitelistedAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintWhitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAddressesWhitelisted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToRemove\",\"type\":\"address\"}],\"name\":\"removeUserAddressFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requestIdToSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moddedRNG\",\"type\":\"uint256\"}],\"name\":\"selectionFromModdedRNG\",\"outputs\":[{\"internalType\":\"enum AbitoRandomNFTGenerator.Selection\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setChanceArray\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistedAddress\",\"type\":\"address\"}],\"name\":\"verifyUserAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"antovanFI, Elizao, irwingtello, leandrogavidia, mektigboy\",\"details\":\"This contract utilizes Chainlink VRF v2 for randomness. URIs point to IPFS. Imports from OpenZeppelin.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AbitoRandomNFTGenerator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Generates NFTs with randomness. Store them in a decentralized way.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AbitoRandomNFTGenerator.sol\":\"AbitoRandomNFTGenerator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0xec8b7e3032e887dd0732d2a5f8552ddce64a99a81b0008ef0bcf6cad68a535fc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AbitoRandomNFTGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\nerror AbitoRandomNFTGenerator__AlreadyInitialized();\\nerror AbitoRandomNFTGenerator__NotEnoughETHSent();\\nerror AbitoRandomNFTGenerator__RangeOutOfScope();\\nerror AbitoRandomNFTGenerator__TransferFailed();\\n\\n/// @title AbitoRandomNFTGenerator\\n/// @author antovanFI, Elizao, irwingtello, leandrogavidia, mektigboy\\n/// @notice Generates NFTs with randomness. Store them in a decentralized way.\\n/// @dev This contract utilizes Chainlink VRF v2 for randomness.\\n/// URIs point to IPFS.\\n/// Imports from OpenZeppelin.\\ncontract AbitoRandomNFTGenerator is\\n    AccessControl,\\n    ERC721URIStorage,\\n    Ownable,\\n    Pausable,\\n    VRFConsumerBaseV2\\n{\\n    // Type Declaration\\n    enum Selection {\\n        EPIC,\\n        RARE,\\n        COMMON\\n    }\\n\\n    // Whitelist Variables\\n    using Counters for Counters.Counter;\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    Counters.Counter private _tokenIdCounter;\\n\\n    uint256 public maxNumberOfWhitelistedAddresses;\\n    uint256 public numberOfAddressesWhitelisted;\\n\\n    mapping(address => bool) whitelistedAddresses;\\n\\n    uint256 public maxNFTLimit;\\n    uint256 public maxNFTLimitWhitelist;\\n    uint256 public nftMinted;\\n\\n    // Chainlink VRF Variables\\n    VRFCoordinatorV2Interface immutable i_coordinator;\\n    uint64 immutable i_subscriptionId;\\n    bytes32 immutable i_gasLane;\\n    uint32 immutable i_callbackGasLimit;\\n    uint16 constant REQ_CONFIRMATIONS = 3;\\n    uint32 constant NUM_WORDS = 1;\\n\\n    // NFT Variables\\n    uint256 i_mintFee;\\n    uint256 public s_tokenCounter;\\n    mapping(uint256 => Selection) private s_tokenIdToBreed;\\n    uint256 internal constant MAX_CHANCE = 1000;\\n    string[] internal s_tokenURIs;\\n    bool s_initialized;\\n\\n    // VRF Helpers\\n    mapping(uint256 => address) public s_requestIdToSender;\\n\\n    // Events\\n    event NFTRequested(uint256 indexed requestId, address requester);\\n    event NFTMinted(Selection selection, address minter);\\n\\n    // Modifiers\\n    modifier verifyWhitelistLimit() {\\n        require(maxNFTLimitWhitelist <= nftMinted, \\\"Whitelist max. limit.\\\");\\n        _;\\n    }\\n\\n    modifier enablePublicMinting() {\\n        require(maxNFTLimit <= nftMinted, \\\"No more stock.\\\");\\n        require(\\n            maxNFTLimitWhitelist > nftMinted,\\n            \\\"Whitelist minting is in progress.\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 _maxWhitelistedAddresses,\\n        uint256 _maxNFTLimit,\\n        uint256 _maxNFTLimitWhitelist,\\n        address coordinator,\\n        uint64 subscriptionId,\\n        bytes32 gasLane,\\n        uint32 callbackGasLimit,\\n        string[3] memory tokenURIs, // Set token URIs in the constructor of our contract.\\n        uint256 mintFee\\n    )\\n        ERC721(\\\"OpenZeppelin Bootcamp Project\\\", \\\"OBP\\\")\\n        VRFConsumerBaseV2(coordinator)\\n    {\\n        i_coordinator = VRFCoordinatorV2Interface(coordinator);\\n        i_subscriptionId = subscriptionId;\\n        i_gasLane = gasLane;\\n        i_mintFee = mintFee;\\n        i_callbackGasLimit = callbackGasLimit;\\n        _initializeContract(tokenURIs);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(PAUSER_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, msg.sender);\\n\\n        maxNumberOfWhitelistedAddresses = _maxWhitelistedAddresses;\\n        maxNFTLimit = _maxNFTLimit;\\n        maxNFTLimitWhitelist = _maxNFTLimitWhitelist;\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    // Whitelist Functions\\n    function addUserAddressToWhitelist(address _addressToWhitelist)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            !whitelistedAddresses[_addressToWhitelist],\\n            \\\"Sender already whitelisted.\\\"\\n        );\\n        require(\\n            numberOfAddressesWhitelisted < maxNumberOfWhitelistedAddresses,\\n            \\\"Error: Whitelist limit exceeded.\\\"\\n        );\\n        whitelistedAddresses[_addressToWhitelist] = true;\\n        numberOfAddressesWhitelisted += 1;\\n    }\\n\\n    function removeUserAddressFromWhitelist(address _addressToRemove)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            whitelistedAddresses[_addressToRemove],\\n            \\\"Sender is not whitelisted.addmod\\\"\\n        );\\n        whitelistedAddresses[_addressToRemove] = false;\\n        numberOfAddressesWhitelisted -= 1;\\n    }\\n\\n    function getNumberOfWhitelistedAddresses() public view returns (uint256) {\\n        return numberOfAddressesWhitelisted;\\n    }\\n\\n    function getMaxNumberOfWhitelistedAddresses()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return maxNumberOfWhitelistedAddresses;\\n    }\\n\\n    function verifyUserAddress(address _whitelistedAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        bool userIsWhitelisted = whitelistedAddresses[_whitelistedAddress];\\n        return userIsWhitelisted;\\n    }\\n\\n    function isWhitelisted(address _whitelistedAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return whitelistedAddresses[_whitelistedAddress];\\n    }\\n\\n    // Mint a random NFT:\\n\\n    // 1. Get random number.\\n    function requestNFT() public payable returns (uint256 requestId) {\\n        if (msg.value < i_mintFee) {\\n            revert AbitoRandomNFTGenerator__NotEnoughETHSent();\\n        }\\n        requestId = i_coordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQ_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        s_requestIdToSender[requestId] = msg.sender;\\n        emit NFTRequested(requestId, msg.sender);\\n    }\\n\\n    // 2. Mint NFT.\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n        internal\\n        override\\n    {\\n        address tokenOwner = s_requestIdToSender[requestId];\\n        uint256 newTokenId = s_tokenCounter;\\n        s_tokenCounter = s_tokenCounter + 1;\\n        uint256 moddedRNG = randomWords[0] % MAX_CHANCE;\\n        Selection selection = selectionFromModdedRNG(moddedRNG);\\n        _safeMint(tokenOwner, newTokenId);\\n        _setTokenURI(newTokenId, s_tokenURIs[uint256(selection)]);\\n        emit NFTMinted(selection, tokenOwner);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        uint256 amount = address(this).balance;\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert AbitoRandomNFTGenerator__TransferFailed();\\n        }\\n    }\\n\\n    function mintWhitelist() public payable verifyWhitelistLimit {\\n        require(isWhitelisted(msg.sender), \\\"User is not whitelisted.\\\");\\n        requestNFT();\\n    }\\n\\n    function publicMint(uint256 requestId, uint256[] memory randomWords)\\n        public\\n        enablePublicMinting\\n    {\\n        requestNFT();\\n        fulfillRandomWords(requestId, randomWords);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override whenNotPaused {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function setChanceArray() public pure returns (uint256[3] memory) {\\n        // 0 - 10 = Epic\\n        // 11 - 100 = Rare\\n        // 101 - 1000 = Common\\n        return [10, 100, MAX_CHANCE];\\n    }\\n\\n    function selectionFromModdedRNG(uint256 moddedRNG)\\n        public\\n        pure\\n        returns (Selection)\\n    {\\n        uint256 cumulativeSum = 0;\\n        uint256[3] memory chanceArray = setChanceArray();\\n\\n        for (uint256 i = 0; i < chanceArray.length; i++) {\\n            if (\\n                moddedRNG >= cumulativeSum &&\\n                moddedRNG < cumulativeSum + chanceArray[i]\\n            ) {\\n                return Selection(i);\\n            }\\n            cumulativeSum = chanceArray[i];\\n        }\\n        revert AbitoRandomNFTGenerator__RangeOutOfScope();\\n    }\\n\\n    function _initializeContract(string[3] memory tokenURIs) private {\\n        if (s_initialized) {\\n            revert AbitoRandomNFTGenerator__AlreadyInitialized();\\n        }\\n        s_tokenURIs = tokenURIs;\\n        s_initialized = true;\\n    }\\n\\n    // Getters:\\n\\n    function getInitialized() public view returns (bool) {\\n        return s_initialized;\\n    }\\n\\n    function getMintFee() public view returns (uint256) {\\n        return i_mintFee;\\n    }\\n\\n    function getTokenCounter() public view returns (uint256) {\\n        return s_tokenCounter;\\n    }\\n\\n    function getTokenURIs(uint256 index) public view returns (string memory) {\\n        return s_tokenURIs[index];\\n    }\\n}\\n\",\"keccak256\":\"0x95fde2743a9bf78a87b0ce13c2ad678162fc531b7b2ea272efcd63d8e0e0cb7f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162006315380380620063158339818101604052810190620000389190620009d5565b856040518060400160405280601d81526020017f4f70656e5a657070656c696e20426f6f7463616d702050726f6a6563740000008152506040518060400160405280600381526020017f4f425000000000000000000000000000000000000000000000000000000000008152508160019081620000b6919062000d14565b508060029081620000c8919062000d14565b505050620000eb620000df6200025d60201b60201c565b6200026560201b60201c565b6000600860146101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508467ffffffffffffffff1660c08167ffffffffffffffff16815250508360e08181525050806010819055508263ffffffff166101008163ffffffff1681525050620001c0826200032b60201b60201c565b620001d56000801b33620003a560201b60201c565b620002077f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33620003a560201b60201c565b620002397f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633620003a560201b60201c565b88600a8190555087600d8190555086600e8190555050505050505050505062000dfb565b600033905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b601460009054906101000a900460ff161562000373576040517f4da657d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060139060036200038692919062000500565b506001601460006101000a81548160ff02191690831515021790555050565b620003b782826200049660201b60201c565b6200049257600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620004376200025d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b8280548282559060005260206000209081019282156200054d579160200282015b828111156200054c5782518290816200053b919062000d14565b509160200191906001019062000521565b5b5090506200055c919062000560565b5090565b5b808211156200058457600081816200057a919062000588565b5060010162000561565b5090565b508054620005969062000b0d565b6000825580601f10620005aa5750620005cb565b601f016020900490600052602060002090810190620005ca9190620005ce565b5b50565b5b80821115620005e9576000816000905550600101620005cf565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620006168162000601565b81146200062257600080fd5b50565b60008151905062000636816200060b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000669826200063c565b9050919050565b6200067b816200065c565b81146200068757600080fd5b50565b6000815190506200069b8162000670565b92915050565b600067ffffffffffffffff82169050919050565b620006c081620006a1565b8114620006cc57600080fd5b50565b600081519050620006e081620006b5565b92915050565b6000819050919050565b620006fb81620006e6565b81146200070757600080fd5b50565b6000815190506200071b81620006f0565b92915050565b600063ffffffff82169050919050565b6200073c8162000721565b81146200074857600080fd5b50565b6000815190506200075c8162000731565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620007b28262000767565b810181811067ffffffffffffffff82111715620007d457620007d362000778565b5b80604052505050565b6000620007e9620005ed565b9050620007f78282620007a7565b919050565b600067ffffffffffffffff8211156200081a576200081962000778565b5b602082029050919050565b600080fd5b600080fd5b600067ffffffffffffffff8211156200084d576200084c62000778565b5b620008588262000767565b9050602081019050919050565b60005b838110156200088557808201518184015260208101905062000868565b8381111562000895576000848401525b50505050565b6000620008b2620008ac846200082f565b620007dd565b905082815260208101848484011115620008d157620008d06200082a565b5b620008de84828562000865565b509392505050565b600082601f830112620008fe57620008fd62000762565b5b8151620009108482602086016200089b565b91505092915050565b6000620009306200092a84620007fc565b620007dd565b905080602084028301858111156200094d576200094c62000825565b5b835b818110156200099b57805167ffffffffffffffff81111562000976576200097562000762565b5b808601620009858982620008e6565b855260208501945050506020810190506200094f565b5050509392505050565b600082601f830112620009bd57620009bc62000762565b5b6003620009cc84828562000919565b91505092915050565b60008060008060008060008060006101208a8c031215620009fb57620009fa620005f7565b5b600062000a0b8c828d0162000625565b995050602062000a1e8c828d0162000625565b985050604062000a318c828d0162000625565b975050606062000a448c828d016200068a565b965050608062000a578c828d01620006cf565b95505060a062000a6a8c828d016200070a565b94505060c062000a7d8c828d016200074b565b93505060e08a015167ffffffffffffffff81111562000aa15762000aa0620005fc565b5b62000aaf8c828d01620009a5565b92505061010062000ac38c828d0162000625565b9150509295985092959850929598565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000b2657607f821691505b60208210810362000b3c5762000b3b62000ade565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000ba67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000b67565b62000bb2868362000b67565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000bf562000bef62000be98462000601565b62000bca565b62000601565b9050919050565b6000819050919050565b62000c118362000bd4565b62000c2962000c208262000bfc565b84845462000b74565b825550505050565b600090565b62000c4062000c31565b62000c4d81848462000c06565b505050565b5b8181101562000c755762000c6960008262000c36565b60018101905062000c53565b5050565b601f82111562000cc45762000c8e8162000b42565b62000c998462000b57565b8101602085101562000ca9578190505b62000cc162000cb88562000b57565b83018262000c52565b50505b505050565b600082821c905092915050565b600062000ce96000198460080262000cc9565b1980831691505092915050565b600062000d04838362000cd6565b9150826002028217905092915050565b62000d1f8262000ad3565b67ffffffffffffffff81111562000d3b5762000d3a62000778565b5b62000d47825462000b0d565b62000d5482828562000c79565b600060209050601f83116001811462000d8c576000841562000d77578287015190505b62000d83858262000cf6565b86555062000df3565b601f19841662000d9c8662000b42565b60005b8281101562000dc65784890151825560018201915060208501945060208101905062000d9f565b8683101562000de6578489015162000de2601f89168262000cd6565b8355505b6001600288020188555050505b505050505050565b60805160a05160c05160e051610100516154ce62000e47600039600061165e0152600061161a0152600061163b015260006115de015260008181610dd50152610e2901526154ce6000f3fe6080604052600436106102e45760003560e01c80637a5caab311610190578063a36f573b116100dc578063d539139311610095578063e985e9c51161006f578063e985e9c514610afe578063ee89dab414610b3b578063f2fde38b14610b66578063f359462a14610b8f576102e4565b8063d539139314610a7f578063d547741f14610aaa578063e63ab1e914610ad3576102e4565b8063a36f573b1461095d578063b88d4fde1461099a578063ba436547146109c3578063bd27baea146109ee578063c87b56dd14610a19578063d4cb890c14610a56576102e4565b80638da5cb5b11610149578063921a5b4811610123578063921a5b48146108a157806395d89b41146108de578063a217fddf14610909578063a22cb46514610934576102e4565b80638da5cb5b1461080e57806391b173491461083957806391d1485414610864576102e4565b80637a5caab31461072f5780637a662f8f1461075a5780637abd25d1146107855780637fa638c8146107a35780638456cb59146107ce5780638cd5a0b9146107e5576102e4565b80633af32abf1161024f5780635c975abb116102085780636e02007d116101e25780636e02007d1461068557806370a08231146106b0578063715018a6146106ed5780637235303314610704576102e4565b80635c975abb146105e05780636352211e1461060b5780636422412014610648576102e4565b80633af32abf146104f85780633ca63262146105355780633ccfd60b146105605780633f4ba83a1461057757806342842e0e1461058e57806358ef6747146105b7576102e4565b806323b872dd116102a157806323b872dd1461040b578063248a9ca3146104345780632d3df31f146104715780632f2ff15d1461047b5780633651f5e4146104a457806336568abe146104cf576102e4565b806301ffc9a7146102e957806306fdde0314610326578063081812fc14610351578063095ea7b31461038e5780630b21a83b146103b75780631fe543e3146103e2575b600080fd5b3480156102f557600080fd5b50610310600480360381019061030b9190613707565b610bcc565b60405161031d919061374f565b60405180910390f35b34801561033257600080fd5b5061033b610bde565b6040516103489190613803565b60405180910390f35b34801561035d57600080fd5b506103786004803603810190610373919061385b565b610c70565b60405161038591906138c9565b60405180910390f35b34801561039a57600080fd5b506103b560048036038101906103b09190613910565b610cb6565b005b3480156103c357600080fd5b506103cc610dcd565b6040516103d9919061395f565b60405180910390f35b3480156103ee57600080fd5b5061040960048036038101906104049190613ac2565b610dd3565b005b34801561041757600080fd5b50610432600480360381019061042d9190613b1e565b610e93565b005b34801561044057600080fd5b5061045b60048036038101906104569190613ba7565b610ef3565b6040516104689190613be3565b60405180910390f35b610479610f12565b005b34801561048757600080fd5b506104a2600480360381019061049d9190613bfe565b610fac565b005b3480156104b057600080fd5b506104b9610fcd565b6040516104c6919061395f565b60405180910390f35b3480156104db57600080fd5b506104f660048036038101906104f19190613bfe565b610fd3565b005b34801561050457600080fd5b5061051f600480360381019061051a9190613c3e565b611056565b60405161052c919061374f565b60405180910390f35b34801561054157600080fd5b5061054a6110ac565b6040516105579190613d16565b60405180910390f35b34801561056c57600080fd5b506105756110d8565b005b34801561058357600080fd5b5061058c61118c565b005b34801561059a57600080fd5b506105b560048036038101906105b09190613b1e565b6111c1565b005b3480156105c357600080fd5b506105de60048036038101906105d99190613c3e565b6111e1565b005b3480156105ec57600080fd5b506105f5611337565b604051610602919061374f565b60405180910390f35b34801561061757600080fd5b50610632600480360381019061062d919061385b565b61134e565b60405161063f91906138c9565b60405180910390f35b34801561065457600080fd5b5061066f600480360381019061066a919061385b565b6113ff565b60405161067c9190613803565b60405180910390f35b34801561069157600080fd5b5061069a6114af565b6040516106a7919061395f565b60405180910390f35b3480156106bc57600080fd5b506106d760048036038101906106d29190613c3e565b6114b9565b6040516106e4919061395f565b60405180910390f35b3480156106f957600080fd5b50610702611570565b005b34801561071057600080fd5b50610719611584565b604051610726919061395f565b60405180910390f35b34801561073b57600080fd5b5061074461158a565b604051610751919061395f565b60405180910390f35b34801561076657600080fd5b5061076f611594565b60405161077c919061395f565b60405180910390f35b61078d61159e565b60405161079a919061395f565b60405180910390f35b3480156107af57600080fd5b506107b8611771565b6040516107c5919061395f565b60405180910390f35b3480156107da57600080fd5b506107e3611777565b005b3480156107f157600080fd5b5061080c60048036038101906108079190613c3e565b6117ac565b005b34801561081a57600080fd5b506108236118bb565b60405161083091906138c9565b60405180910390f35b34801561084557600080fd5b5061084e6118e5565b60405161085b919061395f565b60405180910390f35b34801561087057600080fd5b5061088b60048036038101906108869190613bfe565b6118ef565b604051610898919061374f565b60405180910390f35b3480156108ad57600080fd5b506108c860048036038101906108c39190613c3e565b611959565b6040516108d5919061374f565b60405180910390f35b3480156108ea57600080fd5b506108f36119b4565b6040516109009190613803565b60405180910390f35b34801561091557600080fd5b5061091e611a46565b60405161092b9190613be3565b60405180910390f35b34801561094057600080fd5b5061095b60048036038101906109569190613d5d565b611a4d565b005b34801561096957600080fd5b50610984600480360381019061097f919061385b565b611a63565b60405161099191906138c9565b60405180910390f35b3480156109a657600080fd5b506109c160048036038101906109bc9190613e52565b611a96565b005b3480156109cf57600080fd5b506109d8611af8565b6040516109e5919061395f565b60405180910390f35b3480156109fa57600080fd5b50610a03611afe565b604051610a10919061395f565b60405180910390f35b348015610a2557600080fd5b50610a406004803603810190610a3b919061385b565b611b04565b604051610a4d9190613803565b60405180910390f35b348015610a6257600080fd5b50610a7d6004803603810190610a789190613ac2565b611c16565b005b348015610a8b57600080fd5b50610a94611cba565b604051610aa19190613be3565b60405180910390f35b348015610ab657600080fd5b50610ad16004803603810190610acc9190613bfe565b611cde565b005b348015610adf57600080fd5b50610ae8611cff565b604051610af59190613be3565b60405180910390f35b348015610b0a57600080fd5b50610b256004803603810190610b209190613ed5565b611d23565b604051610b32919061374f565b60405180910390f35b348015610b4757600080fd5b50610b50611db7565b604051610b5d919061374f565b60405180910390f35b348015610b7257600080fd5b50610b8d6004803603810190610b889190613c3e565b611dce565b005b348015610b9b57600080fd5b50610bb66004803603810190610bb1919061385b565b611e51565b604051610bc39190613f8c565b60405180910390f35b6000610bd782611f28565b9050919050565b606060018054610bed90613fd6565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1990613fd6565b8015610c665780601f10610c3b57610100808354040283529160200191610c66565b820191906000526020600020905b815481529060010190602001808311610c4957829003601f168201915b5050505050905090565b6000610c7b8261200a565b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610cc18261134e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2890614079565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610d50612055565b73ffffffffffffffffffffffffffffffffffffffff161480610d7f5750610d7e81610d79612055565b611d23565b5b610dbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db59061410b565b60405180910390fd5b610dc8838361205d565b505050565b60115481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e8557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610e7c92919061412b565b60405180910390fd5b610e8f8282612116565b5050565b610ea4610e9e612055565b826122b1565b610ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eda906141c6565b60405180910390fd5b610eee838383612346565b505050565b6000806000838152602001908152602001600020600101549050919050565b600f54600e541115610f59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5090614232565b60405180910390fd5b610f6233611056565b610fa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f989061429e565b60405180910390fd5b610fa961159e565b50565b610fb582610ef3565b610fbe816125ac565b610fc883836125c0565b505050565b600f5481565b610fdb612055565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103f90614330565b60405180910390fd5b61105282826126a0565b5050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6110b4613679565b6040518060600160405280600a8152602001606481526020016103e8815250905090565b6110e0612781565b600047905060003373ffffffffffffffffffffffffffffffffffffffff168260405161110b90614381565b60006040518083038185875af1925050503d8060008114611148576040519150601f19603f3d011682016040523d82523d6000602084013e61114d565b606091505b5050905080611188576040517f0ae9055500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6111b6816125ac565b6111be6127ff565b50565b6111dc83838360405180602001604052806000815250611a96565b505050565b6000801b6111ee816125ac565b600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561127b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611272906143e2565b60405180910390fd5b600a54600b54106112c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b89061444e565b60405180910390fd5b6001600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600b600082825461132c919061449d565b925050819055505050565b6000600860149054906101000a900460ff16905090565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ed9061453f565b60405180910390fd5b80915050919050565b6060601382815481106114155761141461455f565b5b90600052602060002001805461142a90613fd6565b80601f016020809104026020016040519081016040528092919081815260200182805461145690613fd6565b80156114a35780601f10611478576101008083540402835291602001916114a3565b820191906000526020600020905b81548152906001019060200180831161148657829003601f168201915b50505050509050919050565b6000601154905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152090614600565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611578612781565b6115826000612862565b565b600b5481565b6000601054905090565b6000600b54905090565b60006010543410156115dc576040517f15c6de4100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161169f95949392919061467f565b6020604051808303816000875af11580156116be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e291906146e7565b9050336015600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807f4e1c2f1eae56e29ec039a2b882eec626e6c420ed5a5b93a203c8b8b695e911b13360405161176691906138c9565b60405180910390a290565b600d5481565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6117a1816125ac565b6117a9612928565b50565b6000801b6117b9816125ac565b600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183c90614760565b60405180910390fd5b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600b60008282546118b09190614780565b925050819055505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600a54905090565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905080915050919050565b6060600280546119c390613fd6565b80601f01602080910402602001604051908101604052809291908181526020018280546119ef90613fd6565b8015611a3c5780601f10611a1157610100808354040283529160200191611a3c565b820191906000526020600020905b815481529060010190602001808311611a1f57829003601f168201915b5050505050905090565b6000801b81565b611a5f611a58612055565b838361298b565b5050565b60156020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611aa7611aa1612055565b836122b1565b611ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611add906141c6565b60405180910390fd5b611af284848484612af7565b50505050565b600a5481565b600e5481565b6060611b0f8261200a565b6000600760008481526020019081526020016000208054611b2f90613fd6565b80601f0160208091040260200160405190810160405280929190818152602001828054611b5b90613fd6565b8015611ba85780601f10611b7d57610100808354040283529160200191611ba8565b820191906000526020600020905b815481529060010190602001808311611b8b57829003601f168201915b505050505090506000611bb9612b53565b90506000815103611bce578192505050611c11565b600082511115611c03578082604051602001611beb9291906147f0565b60405160208183030381529060405292505050611c11565b611c0c84612b6a565b925050505b919050565b600f54600d541115611c5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5490614860565b60405180910390fd5b600f54600e5411611ca3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9a906148f2565b60405180910390fd5b611cab61159e565b50611cb68282612116565b5050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b611ce782610ef3565b611cf0816125ac565b611cfa83836126a0565b505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000601460009054906101000a900460ff16905090565b611dd6612781565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3c90614984565b60405180910390fd5b611e4e81612862565b50565b600080600090506000611e626110ac565b905060005b6003811015611ef057828510158015611ea15750818160038110611e8e57611e8d61455f565b5b602002015183611e9e919061449d565b85105b15611ec357806002811115611eb957611eb8613f15565b5b9350505050611f23565b818160038110611ed657611ed561455f565b5b602002015192508080611ee8906149a4565b915050611e67565b506040517f1a47b41b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611ff357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612003575061200282612bd2565b5b9050919050565b61201381612c4c565b612052576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120499061453f565b60405180910390fd5b50565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166120d08361134e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006015600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060115490506001601154612164919061449d565b60118190555060006103e8846000815181106121835761218261455f565b5b60200260200101516121959190614a1b565b905060006121a282611e51565b90506121ae8484612cb8565b6122708360138360028111156121c7576121c6613f15565b5b815481106121d8576121d761455f565b5b9060005260206000200180546121ed90613fd6565b80601f016020809104026020016040519081016040528092919081815260200182805461221990613fd6565b80156122665780601f1061223b57610100808354040283529160200191612266565b820191906000526020600020905b81548152906001019060200180831161224957829003601f168201915b5050505050612cd6565b7fab79897476febbd649710b1bd1dc3e93a316d3dee65f65b022ab89a4b7e206b581856040516122a1929190614a4c565b60405180910390a1505050505050565b6000806122bd8361134e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806122ff57506122fe8185611d23565b5b8061233d57508373ffffffffffffffffffffffffffffffffffffffff1661232584610c70565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166123668261134e565b73ffffffffffffffffffffffffffffffffffffffff16146123bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b390614ae7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361242b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242290614b79565b60405180910390fd5b612436838383612d43565b61244160008261205d565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124919190614780565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124e8919061449d565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46125a7838383612d5b565b505050565b6125bd816125b8612055565b612d60565b50565b6125ca82826118ef565b61269c57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612641612055565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6126aa82826118ef565b1561277d57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612722612055565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b612789612055565b73ffffffffffffffffffffffffffffffffffffffff166127a76118bb565b73ffffffffffffffffffffffffffffffffffffffff16146127fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f490614be5565b60405180910390fd5b565b612807612dfd565b6000600860146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61284b612055565b60405161285891906138c9565b60405180910390a1565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612930612e46565b6001600860146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612974612055565b60405161298191906138c9565b60405180910390a1565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036129f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129f090614c51565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612aea919061374f565b60405180910390a3505050565b612b02848484612346565b612b0e84848484612e90565b612b4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4490614ce3565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060612b758261200a565b6000612b7f612b53565b90506000815111612b9f5760405180602001604052806000815250612bca565b80612ba984613017565b604051602001612bba9291906147f0565b6040516020818303038152906040525b915050919050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612c455750612c4482613177565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b612cd28282604051806020016040528060008152506131e1565b5050565b612cdf82612c4c565b612d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1590614d75565b60405180910390fd5b80600760008481526020019081526020016000209081612d3e9190614f41565b505050565b612d4b612e46565b612d5683838361323c565b505050565b505050565b612d6a82826118ef565b612df957612d8f8173ffffffffffffffffffffffffffffffffffffffff166014613241565b612d9d8360001c6020613241565b604051602001612dae9291906150ab565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df09190613803565b60405180910390fd5b5050565b612e05611337565b612e44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3b90615131565b60405180910390fd5b565b612e4e611337565b15612e8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e859061519d565b60405180910390fd5b565b6000612eb18473ffffffffffffffffffffffffffffffffffffffff1661347d565b1561300a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612eda612055565b8786866040518563ffffffff1660e01b8152600401612efc9493929190615212565b6020604051808303816000875af1925050508015612f3857506040513d601f19601f82011682018060405250810190612f359190615273565b60015b612fba573d8060008114612f68576040519150601f19603f3d011682016040523d82523d6000602084013e612f6d565b606091505b506000815103612fb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa990614ce3565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061300f565b600190505b949350505050565b60606000820361305e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613172565b600082905060005b60008214613090578080613079906149a4565b915050600a8261308991906152a0565b9150613066565b60008167ffffffffffffffff8111156130ac576130ab61397f565b5b6040519080825280601f01601f1916602001820160405280156130de5781602001600182028036833780820191505090505b5090505b6000851461316b576001826130f79190614780565b9150600a856131069190614a1b565b6030613112919061449d565b60f81b8183815181106131285761312761455f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561316491906152a0565b94506130e2565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6131eb83836134a0565b6131f86000848484612e90565b613237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161322e90614ce3565b60405180910390fd5b505050565b505050565b60606000600283600261325491906152d1565b61325e919061449d565b67ffffffffffffffff8111156132775761327661397f565b5b6040519080825280601f01601f1916602001820160405280156132a95781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106132e1576132e061455f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106133455761334461455f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261338591906152d1565b61338f919061449d565b90505b600181111561342f577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106133d1576133d061455f565b5b1a60f81b8282815181106133e8576133e761455f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806134289061532b565b9050613392565b5060008414613473576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161346a906153a0565b60405180910390fd5b8091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361350f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135069061540c565b60405180910390fd5b61351881612c4c565b15613558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161354f90615478565b60405180910390fd5b61356460008383612d43565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546135b4919061449d565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461367560008383612d5b565b5050565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6136e4816136af565b81146136ef57600080fd5b50565b600081359050613701816136db565b92915050565b60006020828403121561371d5761371c6136a5565b5b600061372b848285016136f2565b91505092915050565b60008115159050919050565b61374981613734565b82525050565b60006020820190506137646000830184613740565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156137a4578082015181840152602081019050613789565b838111156137b3576000848401525b50505050565b6000601f19601f8301169050919050565b60006137d58261376a565b6137df8185613775565b93506137ef818560208601613786565b6137f8816137b9565b840191505092915050565b6000602082019050818103600083015261381d81846137ca565b905092915050565b6000819050919050565b61383881613825565b811461384357600080fd5b50565b6000813590506138558161382f565b92915050565b600060208284031215613871576138706136a5565b5b600061387f84828501613846565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006138b382613888565b9050919050565b6138c3816138a8565b82525050565b60006020820190506138de60008301846138ba565b92915050565b6138ed816138a8565b81146138f857600080fd5b50565b60008135905061390a816138e4565b92915050565b60008060408385031215613927576139266136a5565b5b6000613935858286016138fb565b925050602061394685828601613846565b9150509250929050565b61395981613825565b82525050565b60006020820190506139746000830184613950565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6139b7826137b9565b810181811067ffffffffffffffff821117156139d6576139d561397f565b5b80604052505050565b60006139e961369b565b90506139f582826139ae565b919050565b600067ffffffffffffffff821115613a1557613a1461397f565b5b602082029050602081019050919050565b600080fd5b6000613a3e613a39846139fa565b6139df565b90508083825260208201905060208402830185811115613a6157613a60613a26565b5b835b81811015613a8a5780613a768882613846565b845260208401935050602081019050613a63565b5050509392505050565b600082601f830112613aa957613aa861397a565b5b8135613ab9848260208601613a2b565b91505092915050565b60008060408385031215613ad957613ad86136a5565b5b6000613ae785828601613846565b925050602083013567ffffffffffffffff811115613b0857613b076136aa565b5b613b1485828601613a94565b9150509250929050565b600080600060608486031215613b3757613b366136a5565b5b6000613b45868287016138fb565b9350506020613b56868287016138fb565b9250506040613b6786828701613846565b9150509250925092565b6000819050919050565b613b8481613b71565b8114613b8f57600080fd5b50565b600081359050613ba181613b7b565b92915050565b600060208284031215613bbd57613bbc6136a5565b5b6000613bcb84828501613b92565b91505092915050565b613bdd81613b71565b82525050565b6000602082019050613bf86000830184613bd4565b92915050565b60008060408385031215613c1557613c146136a5565b5b6000613c2385828601613b92565b9250506020613c34858286016138fb565b9150509250929050565b600060208284031215613c5457613c536136a5565b5b6000613c62848285016138fb565b91505092915050565b600060039050919050565b600081905092915050565b6000819050919050565b613c9481613825565b82525050565b6000613ca68383613c8b565b60208301905092915050565b6000602082019050919050565b613cc881613c6b565b613cd28184613c76565b9250613cdd82613c81565b8060005b83811015613d0e578151613cf58782613c9a565b9650613d0083613cb2565b925050600181019050613ce1565b505050505050565b6000606082019050613d2b6000830184613cbf565b92915050565b613d3a81613734565b8114613d4557600080fd5b50565b600081359050613d5781613d31565b92915050565b60008060408385031215613d7457613d736136a5565b5b6000613d82858286016138fb565b9250506020613d9385828601613d48565b9150509250929050565b600080fd5b600067ffffffffffffffff821115613dbd57613dbc61397f565b5b613dc6826137b9565b9050602081019050919050565b82818337600083830152505050565b6000613df5613df084613da2565b6139df565b905082815260208101848484011115613e1157613e10613d9d565b5b613e1c848285613dd3565b509392505050565b600082601f830112613e3957613e3861397a565b5b8135613e49848260208601613de2565b91505092915050565b60008060008060808587031215613e6c57613e6b6136a5565b5b6000613e7a878288016138fb565b9450506020613e8b878288016138fb565b9350506040613e9c87828801613846565b925050606085013567ffffffffffffffff811115613ebd57613ebc6136aa565b5b613ec987828801613e24565b91505092959194509250565b60008060408385031215613eec57613eeb6136a5565b5b6000613efa858286016138fb565b9250506020613f0b858286016138fb565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110613f5557613f54613f15565b5b50565b6000819050613f6682613f44565b919050565b6000613f7682613f58565b9050919050565b613f8681613f6b565b82525050565b6000602082019050613fa16000830184613f7d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613fee57607f821691505b60208210810361400157614000613fa7565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000614063602183613775565b915061406e82614007565b604082019050919050565b6000602082019050818103600083015261409281614056565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b60006140f5603e83613775565b915061410082614099565b604082019050919050565b60006020820190508181036000830152614124816140e8565b9050919050565b600060408201905061414060008301856138ba565b61414d60208301846138ba565b9392505050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b60006141b0602e83613775565b91506141bb82614154565b604082019050919050565b600060208201905081810360008301526141df816141a3565b9050919050565b7f57686974656c697374206d61782e206c696d69742e0000000000000000000000600082015250565b600061421c601583613775565b9150614227826141e6565b602082019050919050565b6000602082019050818103600083015261424b8161420f565b9050919050565b7f55736572206973206e6f742077686974656c69737465642e0000000000000000600082015250565b6000614288601883613775565b915061429382614252565b602082019050919050565b600060208201905081810360008301526142b78161427b565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600061431a602f83613775565b9150614325826142be565b604082019050919050565b600060208201905081810360008301526143498161430d565b9050919050565b600081905092915050565b50565b600061436b600083614350565b91506143768261435b565b600082019050919050565b600061438c8261435e565b9150819050919050565b7f53656e64657220616c72656164792077686974656c69737465642e0000000000600082015250565b60006143cc601b83613775565b91506143d782614396565b602082019050919050565b600060208201905081810360008301526143fb816143bf565b9050919050565b7f4572726f723a2057686974656c697374206c696d69742065786365656465642e600082015250565b6000614438602083613775565b915061444382614402565b602082019050919050565b600060208201905081810360008301526144678161442b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006144a882613825565b91506144b383613825565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156144e8576144e761446e565b5b828201905092915050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000614529601883613775565b9150614534826144f3565b602082019050919050565b600060208201905081810360008301526145588161451c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006145ea602983613775565b91506145f58261458e565b604082019050919050565b60006020820190508181036000830152614619816145dd565b9050919050565b600067ffffffffffffffff82169050919050565b61463d81614620565b82525050565b600061ffff82169050919050565b61465a81614643565b82525050565b600063ffffffff82169050919050565b61467981614660565b82525050565b600060a0820190506146946000830188613bd4565b6146a16020830187614634565b6146ae6040830186614651565b6146bb6060830185614670565b6146c86080830184614670565b9695505050505050565b6000815190506146e18161382f565b92915050565b6000602082840312156146fd576146fc6136a5565b5b600061470b848285016146d2565b91505092915050565b7f53656e646572206973206e6f742077686974656c69737465642e6164646d6f64600082015250565b600061474a602083613775565b915061475582614714565b602082019050919050565b600060208201905081810360008301526147798161473d565b9050919050565b600061478b82613825565b915061479683613825565b9250828210156147a9576147a861446e565b5b828203905092915050565b600081905092915050565b60006147ca8261376a565b6147d481856147b4565b93506147e4818560208601613786565b80840191505092915050565b60006147fc82856147bf565b915061480882846147bf565b91508190509392505050565b7f4e6f206d6f72652073746f636b2e000000000000000000000000000000000000600082015250565b600061484a600e83613775565b915061485582614814565b602082019050919050565b600060208201905081810360008301526148798161483d565b9050919050565b7f57686974656c697374206d696e74696e6720697320696e2070726f677265737360008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006148dc602183613775565b91506148e782614880565b604082019050919050565b6000602082019050818103600083015261490b816148cf565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061496e602683613775565b915061497982614912565b604082019050919050565b6000602082019050818103600083015261499d81614961565b9050919050565b60006149af82613825565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036149e1576149e061446e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614a2682613825565b9150614a3183613825565b925082614a4157614a406149ec565b5b828206905092915050565b6000604082019050614a616000830185613f7d565b614a6e60208301846138ba565b9392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000614ad1602583613775565b9150614adc82614a75565b604082019050919050565b60006020820190508181036000830152614b0081614ac4565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614b63602483613775565b9150614b6e82614b07565b604082019050919050565b60006020820190508181036000830152614b9281614b56565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614bcf602083613775565b9150614bda82614b99565b602082019050919050565b60006020820190508181036000830152614bfe81614bc2565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614c3b601983613775565b9150614c4682614c05565b602082019050919050565b60006020820190508181036000830152614c6a81614c2e565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614ccd603283613775565b9150614cd882614c71565b604082019050919050565b60006020820190508181036000830152614cfc81614cc0565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000614d5f602e83613775565b9150614d6a82614d03565b604082019050919050565b60006020820190508181036000830152614d8e81614d52565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614df77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614dba565b614e018683614dba565b95508019841693508086168417925050509392505050565b6000819050919050565b6000614e3e614e39614e3484613825565b614e19565b613825565b9050919050565b6000819050919050565b614e5883614e23565b614e6c614e6482614e45565b848454614dc7565b825550505050565b600090565b614e81614e74565b614e8c818484614e4f565b505050565b5b81811015614eb057614ea5600082614e79565b600181019050614e92565b5050565b601f821115614ef557614ec681614d95565b614ecf84614daa565b81016020851015614ede578190505b614ef2614eea85614daa565b830182614e91565b50505b505050565b600082821c905092915050565b6000614f1860001984600802614efa565b1980831691505092915050565b6000614f318383614f07565b9150826002028217905092915050565b614f4a8261376a565b67ffffffffffffffff811115614f6357614f6261397f565b5b614f6d8254613fd6565b614f78828285614eb4565b600060209050601f831160018114614fab5760008415614f99578287015190505b614fa38582614f25565b86555061500b565b601f198416614fb986614d95565b60005b82811015614fe157848901518255600182019150602085019450602081019050614fbc565b86831015614ffe5784890151614ffa601f891682614f07565b8355505b6001600288020188555050505b505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006150496017836147b4565b915061505482615013565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006150956011836147b4565b91506150a08261505f565b601182019050919050565b60006150b68261503c565b91506150c282856147bf565b91506150cd82615088565b91506150d982846147bf565b91508190509392505050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b600061511b601483613775565b9150615126826150e5565b602082019050919050565b6000602082019050818103600083015261514a8161510e565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000615187601083613775565b915061519282615151565b602082019050919050565b600060208201905081810360008301526151b68161517a565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006151e4826151bd565b6151ee81856151c8565b93506151fe818560208601613786565b615207816137b9565b840191505092915050565b600060808201905061522760008301876138ba565b61523460208301866138ba565b6152416040830185613950565b818103606083015261525381846151d9565b905095945050505050565b60008151905061526d816136db565b92915050565b600060208284031215615289576152886136a5565b5b60006152978482850161525e565b91505092915050565b60006152ab82613825565b91506152b683613825565b9250826152c6576152c56149ec565b5b828204905092915050565b60006152dc82613825565b91506152e783613825565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156153205761531f61446e565b5b828202905092915050565b600061533682613825565b9150600082036153495761534861446e565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061538a602083613775565b915061539582615354565b602082019050919050565b600060208201905081810360008301526153b98161537d565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006153f6602083613775565b9150615401826153c0565b602082019050919050565b60006020820190508181036000830152615425816153e9565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615462601c83613775565b915061546d8261542c565b602082019050919050565b6000602082019050818103600083015261549181615455565b905091905056fea264697066735822122020adceb2ca53fa94ece68b0c52562e6b474697eb2b85265acd6349d4a651443c64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106102e45760003560e01c80637a5caab311610190578063a36f573b116100dc578063d539139311610095578063e985e9c51161006f578063e985e9c514610afe578063ee89dab414610b3b578063f2fde38b14610b66578063f359462a14610b8f576102e4565b8063d539139314610a7f578063d547741f14610aaa578063e63ab1e914610ad3576102e4565b8063a36f573b1461095d578063b88d4fde1461099a578063ba436547146109c3578063bd27baea146109ee578063c87b56dd14610a19578063d4cb890c14610a56576102e4565b80638da5cb5b11610149578063921a5b4811610123578063921a5b48146108a157806395d89b41146108de578063a217fddf14610909578063a22cb46514610934576102e4565b80638da5cb5b1461080e57806391b173491461083957806391d1485414610864576102e4565b80637a5caab31461072f5780637a662f8f1461075a5780637abd25d1146107855780637fa638c8146107a35780638456cb59146107ce5780638cd5a0b9146107e5576102e4565b80633af32abf1161024f5780635c975abb116102085780636e02007d116101e25780636e02007d1461068557806370a08231146106b0578063715018a6146106ed5780637235303314610704576102e4565b80635c975abb146105e05780636352211e1461060b5780636422412014610648576102e4565b80633af32abf146104f85780633ca63262146105355780633ccfd60b146105605780633f4ba83a1461057757806342842e0e1461058e57806358ef6747146105b7576102e4565b806323b872dd116102a157806323b872dd1461040b578063248a9ca3146104345780632d3df31f146104715780632f2ff15d1461047b5780633651f5e4146104a457806336568abe146104cf576102e4565b806301ffc9a7146102e957806306fdde0314610326578063081812fc14610351578063095ea7b31461038e5780630b21a83b146103b75780631fe543e3146103e2575b600080fd5b3480156102f557600080fd5b50610310600480360381019061030b9190613707565b610bcc565b60405161031d919061374f565b60405180910390f35b34801561033257600080fd5b5061033b610bde565b6040516103489190613803565b60405180910390f35b34801561035d57600080fd5b506103786004803603810190610373919061385b565b610c70565b60405161038591906138c9565b60405180910390f35b34801561039a57600080fd5b506103b560048036038101906103b09190613910565b610cb6565b005b3480156103c357600080fd5b506103cc610dcd565b6040516103d9919061395f565b60405180910390f35b3480156103ee57600080fd5b5061040960048036038101906104049190613ac2565b610dd3565b005b34801561041757600080fd5b50610432600480360381019061042d9190613b1e565b610e93565b005b34801561044057600080fd5b5061045b60048036038101906104569190613ba7565b610ef3565b6040516104689190613be3565b60405180910390f35b610479610f12565b005b34801561048757600080fd5b506104a2600480360381019061049d9190613bfe565b610fac565b005b3480156104b057600080fd5b506104b9610fcd565b6040516104c6919061395f565b60405180910390f35b3480156104db57600080fd5b506104f660048036038101906104f19190613bfe565b610fd3565b005b34801561050457600080fd5b5061051f600480360381019061051a9190613c3e565b611056565b60405161052c919061374f565b60405180910390f35b34801561054157600080fd5b5061054a6110ac565b6040516105579190613d16565b60405180910390f35b34801561056c57600080fd5b506105756110d8565b005b34801561058357600080fd5b5061058c61118c565b005b34801561059a57600080fd5b506105b560048036038101906105b09190613b1e565b6111c1565b005b3480156105c357600080fd5b506105de60048036038101906105d99190613c3e565b6111e1565b005b3480156105ec57600080fd5b506105f5611337565b604051610602919061374f565b60405180910390f35b34801561061757600080fd5b50610632600480360381019061062d919061385b565b61134e565b60405161063f91906138c9565b60405180910390f35b34801561065457600080fd5b5061066f600480360381019061066a919061385b565b6113ff565b60405161067c9190613803565b60405180910390f35b34801561069157600080fd5b5061069a6114af565b6040516106a7919061395f565b60405180910390f35b3480156106bc57600080fd5b506106d760048036038101906106d29190613c3e565b6114b9565b6040516106e4919061395f565b60405180910390f35b3480156106f957600080fd5b50610702611570565b005b34801561071057600080fd5b50610719611584565b604051610726919061395f565b60405180910390f35b34801561073b57600080fd5b5061074461158a565b604051610751919061395f565b60405180910390f35b34801561076657600080fd5b5061076f611594565b60405161077c919061395f565b60405180910390f35b61078d61159e565b60405161079a919061395f565b60405180910390f35b3480156107af57600080fd5b506107b8611771565b6040516107c5919061395f565b60405180910390f35b3480156107da57600080fd5b506107e3611777565b005b3480156107f157600080fd5b5061080c60048036038101906108079190613c3e565b6117ac565b005b34801561081a57600080fd5b506108236118bb565b60405161083091906138c9565b60405180910390f35b34801561084557600080fd5b5061084e6118e5565b60405161085b919061395f565b60405180910390f35b34801561087057600080fd5b5061088b60048036038101906108869190613bfe565b6118ef565b604051610898919061374f565b60405180910390f35b3480156108ad57600080fd5b506108c860048036038101906108c39190613c3e565b611959565b6040516108d5919061374f565b60405180910390f35b3480156108ea57600080fd5b506108f36119b4565b6040516109009190613803565b60405180910390f35b34801561091557600080fd5b5061091e611a46565b60405161092b9190613be3565b60405180910390f35b34801561094057600080fd5b5061095b60048036038101906109569190613d5d565b611a4d565b005b34801561096957600080fd5b50610984600480360381019061097f919061385b565b611a63565b60405161099191906138c9565b60405180910390f35b3480156109a657600080fd5b506109c160048036038101906109bc9190613e52565b611a96565b005b3480156109cf57600080fd5b506109d8611af8565b6040516109e5919061395f565b60405180910390f35b3480156109fa57600080fd5b50610a03611afe565b604051610a10919061395f565b60405180910390f35b348015610a2557600080fd5b50610a406004803603810190610a3b919061385b565b611b04565b604051610a4d9190613803565b60405180910390f35b348015610a6257600080fd5b50610a7d6004803603810190610a789190613ac2565b611c16565b005b348015610a8b57600080fd5b50610a94611cba565b604051610aa19190613be3565b60405180910390f35b348015610ab657600080fd5b50610ad16004803603810190610acc9190613bfe565b611cde565b005b348015610adf57600080fd5b50610ae8611cff565b604051610af59190613be3565b60405180910390f35b348015610b0a57600080fd5b50610b256004803603810190610b209190613ed5565b611d23565b604051610b32919061374f565b60405180910390f35b348015610b4757600080fd5b50610b50611db7565b604051610b5d919061374f565b60405180910390f35b348015610b7257600080fd5b50610b8d6004803603810190610b889190613c3e565b611dce565b005b348015610b9b57600080fd5b50610bb66004803603810190610bb1919061385b565b611e51565b604051610bc39190613f8c565b60405180910390f35b6000610bd782611f28565b9050919050565b606060018054610bed90613fd6565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1990613fd6565b8015610c665780601f10610c3b57610100808354040283529160200191610c66565b820191906000526020600020905b815481529060010190602001808311610c4957829003601f168201915b5050505050905090565b6000610c7b8261200a565b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610cc18261134e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2890614079565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610d50612055565b73ffffffffffffffffffffffffffffffffffffffff161480610d7f5750610d7e81610d79612055565b611d23565b5b610dbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db59061410b565b60405180910390fd5b610dc8838361205d565b505050565b60115481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e8557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610e7c92919061412b565b60405180910390fd5b610e8f8282612116565b5050565b610ea4610e9e612055565b826122b1565b610ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eda906141c6565b60405180910390fd5b610eee838383612346565b505050565b6000806000838152602001908152602001600020600101549050919050565b600f54600e541115610f59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5090614232565b60405180910390fd5b610f6233611056565b610fa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f989061429e565b60405180910390fd5b610fa961159e565b50565b610fb582610ef3565b610fbe816125ac565b610fc883836125c0565b505050565b600f5481565b610fdb612055565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103f90614330565b60405180910390fd5b61105282826126a0565b5050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6110b4613679565b6040518060600160405280600a8152602001606481526020016103e8815250905090565b6110e0612781565b600047905060003373ffffffffffffffffffffffffffffffffffffffff168260405161110b90614381565b60006040518083038185875af1925050503d8060008114611148576040519150601f19603f3d011682016040523d82523d6000602084013e61114d565b606091505b5050905080611188576040517f0ae9055500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6111b6816125ac565b6111be6127ff565b50565b6111dc83838360405180602001604052806000815250611a96565b505050565b6000801b6111ee816125ac565b600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561127b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611272906143e2565b60405180910390fd5b600a54600b54106112c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b89061444e565b60405180910390fd5b6001600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600b600082825461132c919061449d565b925050819055505050565b6000600860149054906101000a900460ff16905090565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ed9061453f565b60405180910390fd5b80915050919050565b6060601382815481106114155761141461455f565b5b90600052602060002001805461142a90613fd6565b80601f016020809104026020016040519081016040528092919081815260200182805461145690613fd6565b80156114a35780601f10611478576101008083540402835291602001916114a3565b820191906000526020600020905b81548152906001019060200180831161148657829003601f168201915b50505050509050919050565b6000601154905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152090614600565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611578612781565b6115826000612862565b565b600b5481565b6000601054905090565b6000600b54905090565b60006010543410156115dc576040517f15c6de4100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161169f95949392919061467f565b6020604051808303816000875af11580156116be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e291906146e7565b9050336015600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807f4e1c2f1eae56e29ec039a2b882eec626e6c420ed5a5b93a203c8b8b695e911b13360405161176691906138c9565b60405180910390a290565b600d5481565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6117a1816125ac565b6117a9612928565b50565b6000801b6117b9816125ac565b600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183c90614760565b60405180910390fd5b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600b60008282546118b09190614780565b925050819055505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600a54905090565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905080915050919050565b6060600280546119c390613fd6565b80601f01602080910402602001604051908101604052809291908181526020018280546119ef90613fd6565b8015611a3c5780601f10611a1157610100808354040283529160200191611a3c565b820191906000526020600020905b815481529060010190602001808311611a1f57829003601f168201915b5050505050905090565b6000801b81565b611a5f611a58612055565b838361298b565b5050565b60156020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611aa7611aa1612055565b836122b1565b611ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611add906141c6565b60405180910390fd5b611af284848484612af7565b50505050565b600a5481565b600e5481565b6060611b0f8261200a565b6000600760008481526020019081526020016000208054611b2f90613fd6565b80601f0160208091040260200160405190810160405280929190818152602001828054611b5b90613fd6565b8015611ba85780601f10611b7d57610100808354040283529160200191611ba8565b820191906000526020600020905b815481529060010190602001808311611b8b57829003601f168201915b505050505090506000611bb9612b53565b90506000815103611bce578192505050611c11565b600082511115611c03578082604051602001611beb9291906147f0565b60405160208183030381529060405292505050611c11565b611c0c84612b6a565b925050505b919050565b600f54600d541115611c5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5490614860565b60405180910390fd5b600f54600e5411611ca3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9a906148f2565b60405180910390fd5b611cab61159e565b50611cb68282612116565b5050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b611ce782610ef3565b611cf0816125ac565b611cfa83836126a0565b505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000601460009054906101000a900460ff16905090565b611dd6612781565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3c90614984565b60405180910390fd5b611e4e81612862565b50565b600080600090506000611e626110ac565b905060005b6003811015611ef057828510158015611ea15750818160038110611e8e57611e8d61455f565b5b602002015183611e9e919061449d565b85105b15611ec357806002811115611eb957611eb8613f15565b5b9350505050611f23565b818160038110611ed657611ed561455f565b5b602002015192508080611ee8906149a4565b915050611e67565b506040517f1a47b41b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611ff357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612003575061200282612bd2565b5b9050919050565b61201381612c4c565b612052576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120499061453f565b60405180910390fd5b50565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166120d08361134e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006015600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060115490506001601154612164919061449d565b60118190555060006103e8846000815181106121835761218261455f565b5b60200260200101516121959190614a1b565b905060006121a282611e51565b90506121ae8484612cb8565b6122708360138360028111156121c7576121c6613f15565b5b815481106121d8576121d761455f565b5b9060005260206000200180546121ed90613fd6565b80601f016020809104026020016040519081016040528092919081815260200182805461221990613fd6565b80156122665780601f1061223b57610100808354040283529160200191612266565b820191906000526020600020905b81548152906001019060200180831161224957829003601f168201915b5050505050612cd6565b7fab79897476febbd649710b1bd1dc3e93a316d3dee65f65b022ab89a4b7e206b581856040516122a1929190614a4c565b60405180910390a1505050505050565b6000806122bd8361134e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806122ff57506122fe8185611d23565b5b8061233d57508373ffffffffffffffffffffffffffffffffffffffff1661232584610c70565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166123668261134e565b73ffffffffffffffffffffffffffffffffffffffff16146123bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b390614ae7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361242b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242290614b79565b60405180910390fd5b612436838383612d43565b61244160008261205d565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124919190614780565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124e8919061449d565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46125a7838383612d5b565b505050565b6125bd816125b8612055565b612d60565b50565b6125ca82826118ef565b61269c57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612641612055565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6126aa82826118ef565b1561277d57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612722612055565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b612789612055565b73ffffffffffffffffffffffffffffffffffffffff166127a76118bb565b73ffffffffffffffffffffffffffffffffffffffff16146127fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f490614be5565b60405180910390fd5b565b612807612dfd565b6000600860146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61284b612055565b60405161285891906138c9565b60405180910390a1565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612930612e46565b6001600860146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612974612055565b60405161298191906138c9565b60405180910390a1565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036129f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129f090614c51565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612aea919061374f565b60405180910390a3505050565b612b02848484612346565b612b0e84848484612e90565b612b4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4490614ce3565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060612b758261200a565b6000612b7f612b53565b90506000815111612b9f5760405180602001604052806000815250612bca565b80612ba984613017565b604051602001612bba9291906147f0565b6040516020818303038152906040525b915050919050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612c455750612c4482613177565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b612cd28282604051806020016040528060008152506131e1565b5050565b612cdf82612c4c565b612d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1590614d75565b60405180910390fd5b80600760008481526020019081526020016000209081612d3e9190614f41565b505050565b612d4b612e46565b612d5683838361323c565b505050565b505050565b612d6a82826118ef565b612df957612d8f8173ffffffffffffffffffffffffffffffffffffffff166014613241565b612d9d8360001c6020613241565b604051602001612dae9291906150ab565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df09190613803565b60405180910390fd5b5050565b612e05611337565b612e44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3b90615131565b60405180910390fd5b565b612e4e611337565b15612e8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e859061519d565b60405180910390fd5b565b6000612eb18473ffffffffffffffffffffffffffffffffffffffff1661347d565b1561300a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612eda612055565b8786866040518563ffffffff1660e01b8152600401612efc9493929190615212565b6020604051808303816000875af1925050508015612f3857506040513d601f19601f82011682018060405250810190612f359190615273565b60015b612fba573d8060008114612f68576040519150601f19603f3d011682016040523d82523d6000602084013e612f6d565b606091505b506000815103612fb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa990614ce3565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061300f565b600190505b949350505050565b60606000820361305e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613172565b600082905060005b60008214613090578080613079906149a4565b915050600a8261308991906152a0565b9150613066565b60008167ffffffffffffffff8111156130ac576130ab61397f565b5b6040519080825280601f01601f1916602001820160405280156130de5781602001600182028036833780820191505090505b5090505b6000851461316b576001826130f79190614780565b9150600a856131069190614a1b565b6030613112919061449d565b60f81b8183815181106131285761312761455f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561316491906152a0565b94506130e2565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6131eb83836134a0565b6131f86000848484612e90565b613237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161322e90614ce3565b60405180910390fd5b505050565b505050565b60606000600283600261325491906152d1565b61325e919061449d565b67ffffffffffffffff8111156132775761327661397f565b5b6040519080825280601f01601f1916602001820160405280156132a95781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106132e1576132e061455f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106133455761334461455f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261338591906152d1565b61338f919061449d565b90505b600181111561342f577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106133d1576133d061455f565b5b1a60f81b8282815181106133e8576133e761455f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806134289061532b565b9050613392565b5060008414613473576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161346a906153a0565b60405180910390fd5b8091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361350f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135069061540c565b60405180910390fd5b61351881612c4c565b15613558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161354f90615478565b60405180910390fd5b61356460008383612d43565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546135b4919061449d565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461367560008383612d5b565b5050565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6136e4816136af565b81146136ef57600080fd5b50565b600081359050613701816136db565b92915050565b60006020828403121561371d5761371c6136a5565b5b600061372b848285016136f2565b91505092915050565b60008115159050919050565b61374981613734565b82525050565b60006020820190506137646000830184613740565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156137a4578082015181840152602081019050613789565b838111156137b3576000848401525b50505050565b6000601f19601f8301169050919050565b60006137d58261376a565b6137df8185613775565b93506137ef818560208601613786565b6137f8816137b9565b840191505092915050565b6000602082019050818103600083015261381d81846137ca565b905092915050565b6000819050919050565b61383881613825565b811461384357600080fd5b50565b6000813590506138558161382f565b92915050565b600060208284031215613871576138706136a5565b5b600061387f84828501613846565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006138b382613888565b9050919050565b6138c3816138a8565b82525050565b60006020820190506138de60008301846138ba565b92915050565b6138ed816138a8565b81146138f857600080fd5b50565b60008135905061390a816138e4565b92915050565b60008060408385031215613927576139266136a5565b5b6000613935858286016138fb565b925050602061394685828601613846565b9150509250929050565b61395981613825565b82525050565b60006020820190506139746000830184613950565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6139b7826137b9565b810181811067ffffffffffffffff821117156139d6576139d561397f565b5b80604052505050565b60006139e961369b565b90506139f582826139ae565b919050565b600067ffffffffffffffff821115613a1557613a1461397f565b5b602082029050602081019050919050565b600080fd5b6000613a3e613a39846139fa565b6139df565b90508083825260208201905060208402830185811115613a6157613a60613a26565b5b835b81811015613a8a5780613a768882613846565b845260208401935050602081019050613a63565b5050509392505050565b600082601f830112613aa957613aa861397a565b5b8135613ab9848260208601613a2b565b91505092915050565b60008060408385031215613ad957613ad86136a5565b5b6000613ae785828601613846565b925050602083013567ffffffffffffffff811115613b0857613b076136aa565b5b613b1485828601613a94565b9150509250929050565b600080600060608486031215613b3757613b366136a5565b5b6000613b45868287016138fb565b9350506020613b56868287016138fb565b9250506040613b6786828701613846565b9150509250925092565b6000819050919050565b613b8481613b71565b8114613b8f57600080fd5b50565b600081359050613ba181613b7b565b92915050565b600060208284031215613bbd57613bbc6136a5565b5b6000613bcb84828501613b92565b91505092915050565b613bdd81613b71565b82525050565b6000602082019050613bf86000830184613bd4565b92915050565b60008060408385031215613c1557613c146136a5565b5b6000613c2385828601613b92565b9250506020613c34858286016138fb565b9150509250929050565b600060208284031215613c5457613c536136a5565b5b6000613c62848285016138fb565b91505092915050565b600060039050919050565b600081905092915050565b6000819050919050565b613c9481613825565b82525050565b6000613ca68383613c8b565b60208301905092915050565b6000602082019050919050565b613cc881613c6b565b613cd28184613c76565b9250613cdd82613c81565b8060005b83811015613d0e578151613cf58782613c9a565b9650613d0083613cb2565b925050600181019050613ce1565b505050505050565b6000606082019050613d2b6000830184613cbf565b92915050565b613d3a81613734565b8114613d4557600080fd5b50565b600081359050613d5781613d31565b92915050565b60008060408385031215613d7457613d736136a5565b5b6000613d82858286016138fb565b9250506020613d9385828601613d48565b9150509250929050565b600080fd5b600067ffffffffffffffff821115613dbd57613dbc61397f565b5b613dc6826137b9565b9050602081019050919050565b82818337600083830152505050565b6000613df5613df084613da2565b6139df565b905082815260208101848484011115613e1157613e10613d9d565b5b613e1c848285613dd3565b509392505050565b600082601f830112613e3957613e3861397a565b5b8135613e49848260208601613de2565b91505092915050565b60008060008060808587031215613e6c57613e6b6136a5565b5b6000613e7a878288016138fb565b9450506020613e8b878288016138fb565b9350506040613e9c87828801613846565b925050606085013567ffffffffffffffff811115613ebd57613ebc6136aa565b5b613ec987828801613e24565b91505092959194509250565b60008060408385031215613eec57613eeb6136a5565b5b6000613efa858286016138fb565b9250506020613f0b858286016138fb565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110613f5557613f54613f15565b5b50565b6000819050613f6682613f44565b919050565b6000613f7682613f58565b9050919050565b613f8681613f6b565b82525050565b6000602082019050613fa16000830184613f7d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613fee57607f821691505b60208210810361400157614000613fa7565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000614063602183613775565b915061406e82614007565b604082019050919050565b6000602082019050818103600083015261409281614056565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b60006140f5603e83613775565b915061410082614099565b604082019050919050565b60006020820190508181036000830152614124816140e8565b9050919050565b600060408201905061414060008301856138ba565b61414d60208301846138ba565b9392505050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b60006141b0602e83613775565b91506141bb82614154565b604082019050919050565b600060208201905081810360008301526141df816141a3565b9050919050565b7f57686974656c697374206d61782e206c696d69742e0000000000000000000000600082015250565b600061421c601583613775565b9150614227826141e6565b602082019050919050565b6000602082019050818103600083015261424b8161420f565b9050919050565b7f55736572206973206e6f742077686974656c69737465642e0000000000000000600082015250565b6000614288601883613775565b915061429382614252565b602082019050919050565b600060208201905081810360008301526142b78161427b565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600061431a602f83613775565b9150614325826142be565b604082019050919050565b600060208201905081810360008301526143498161430d565b9050919050565b600081905092915050565b50565b600061436b600083614350565b91506143768261435b565b600082019050919050565b600061438c8261435e565b9150819050919050565b7f53656e64657220616c72656164792077686974656c69737465642e0000000000600082015250565b60006143cc601b83613775565b91506143d782614396565b602082019050919050565b600060208201905081810360008301526143fb816143bf565b9050919050565b7f4572726f723a2057686974656c697374206c696d69742065786365656465642e600082015250565b6000614438602083613775565b915061444382614402565b602082019050919050565b600060208201905081810360008301526144678161442b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006144a882613825565b91506144b383613825565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156144e8576144e761446e565b5b828201905092915050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000614529601883613775565b9150614534826144f3565b602082019050919050565b600060208201905081810360008301526145588161451c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006145ea602983613775565b91506145f58261458e565b604082019050919050565b60006020820190508181036000830152614619816145dd565b9050919050565b600067ffffffffffffffff82169050919050565b61463d81614620565b82525050565b600061ffff82169050919050565b61465a81614643565b82525050565b600063ffffffff82169050919050565b61467981614660565b82525050565b600060a0820190506146946000830188613bd4565b6146a16020830187614634565b6146ae6040830186614651565b6146bb6060830185614670565b6146c86080830184614670565b9695505050505050565b6000815190506146e18161382f565b92915050565b6000602082840312156146fd576146fc6136a5565b5b600061470b848285016146d2565b91505092915050565b7f53656e646572206973206e6f742077686974656c69737465642e6164646d6f64600082015250565b600061474a602083613775565b915061475582614714565b602082019050919050565b600060208201905081810360008301526147798161473d565b9050919050565b600061478b82613825565b915061479683613825565b9250828210156147a9576147a861446e565b5b828203905092915050565b600081905092915050565b60006147ca8261376a565b6147d481856147b4565b93506147e4818560208601613786565b80840191505092915050565b60006147fc82856147bf565b915061480882846147bf565b91508190509392505050565b7f4e6f206d6f72652073746f636b2e000000000000000000000000000000000000600082015250565b600061484a600e83613775565b915061485582614814565b602082019050919050565b600060208201905081810360008301526148798161483d565b9050919050565b7f57686974656c697374206d696e74696e6720697320696e2070726f677265737360008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006148dc602183613775565b91506148e782614880565b604082019050919050565b6000602082019050818103600083015261490b816148cf565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061496e602683613775565b915061497982614912565b604082019050919050565b6000602082019050818103600083015261499d81614961565b9050919050565b60006149af82613825565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036149e1576149e061446e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614a2682613825565b9150614a3183613825565b925082614a4157614a406149ec565b5b828206905092915050565b6000604082019050614a616000830185613f7d565b614a6e60208301846138ba565b9392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000614ad1602583613775565b9150614adc82614a75565b604082019050919050565b60006020820190508181036000830152614b0081614ac4565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614b63602483613775565b9150614b6e82614b07565b604082019050919050565b60006020820190508181036000830152614b9281614b56565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614bcf602083613775565b9150614bda82614b99565b602082019050919050565b60006020820190508181036000830152614bfe81614bc2565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614c3b601983613775565b9150614c4682614c05565b602082019050919050565b60006020820190508181036000830152614c6a81614c2e565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614ccd603283613775565b9150614cd882614c71565b604082019050919050565b60006020820190508181036000830152614cfc81614cc0565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000614d5f602e83613775565b9150614d6a82614d03565b604082019050919050565b60006020820190508181036000830152614d8e81614d52565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614df77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614dba565b614e018683614dba565b95508019841693508086168417925050509392505050565b6000819050919050565b6000614e3e614e39614e3484613825565b614e19565b613825565b9050919050565b6000819050919050565b614e5883614e23565b614e6c614e6482614e45565b848454614dc7565b825550505050565b600090565b614e81614e74565b614e8c818484614e4f565b505050565b5b81811015614eb057614ea5600082614e79565b600181019050614e92565b5050565b601f821115614ef557614ec681614d95565b614ecf84614daa565b81016020851015614ede578190505b614ef2614eea85614daa565b830182614e91565b50505b505050565b600082821c905092915050565b6000614f1860001984600802614efa565b1980831691505092915050565b6000614f318383614f07565b9150826002028217905092915050565b614f4a8261376a565b67ffffffffffffffff811115614f6357614f6261397f565b5b614f6d8254613fd6565b614f78828285614eb4565b600060209050601f831160018114614fab5760008415614f99578287015190505b614fa38582614f25565b86555061500b565b601f198416614fb986614d95565b60005b82811015614fe157848901518255600182019150602085019450602081019050614fbc565b86831015614ffe5784890151614ffa601f891682614f07565b8355505b6001600288020188555050505b505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006150496017836147b4565b915061505482615013565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006150956011836147b4565b91506150a08261505f565b601182019050919050565b60006150b68261503c565b91506150c282856147bf565b91506150cd82615088565b91506150d982846147bf565b91508190509392505050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b600061511b601483613775565b9150615126826150e5565b602082019050919050565b6000602082019050818103600083015261514a8161510e565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000615187601083613775565b915061519282615151565b602082019050919050565b600060208201905081810360008301526151b68161517a565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006151e4826151bd565b6151ee81856151c8565b93506151fe818560208601613786565b615207816137b9565b840191505092915050565b600060808201905061522760008301876138ba565b61523460208301866138ba565b6152416040830185613950565b818103606083015261525381846151d9565b905095945050505050565b60008151905061526d816136db565b92915050565b600060208284031215615289576152886136a5565b5b60006152978482850161525e565b91505092915050565b60006152ab82613825565b91506152b683613825565b9250826152c6576152c56149ec565b5b828204905092915050565b60006152dc82613825565b91506152e783613825565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156153205761531f61446e565b5b828202905092915050565b600061533682613825565b9150600082036153495761534861446e565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061538a602083613775565b915061539582615354565b602082019050919050565b600060208201905081810360008301526153b98161537d565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006153f6602083613775565b9150615401826153c0565b602082019050919050565b60006020820190508181036000830152615425816153e9565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615462601c83613775565b915061546d8261542c565b602082019050919050565b6000602082019050818103600083015261549181615455565b905091905056fea264697066735822122020adceb2ca53fa94ece68b0c52562e6b474697eb2b85265acd6349d4a651443c64736f6c634300080f0033",
  "devdoc": {
    "author": "antovanFI, Elizao, irwingtello, leandrogavidia, mektigboy",
    "details": "This contract utilizes Chainlink VRF v2 for randomness. URIs point to IPFS. Imports from OpenZeppelin.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "AbitoRandomNFTGenerator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Generates NFTs with randomness. Store them in a decentralized way.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 845,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)840_storage)"
      },
      {
        "astId": 1460,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1462,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1466,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1470,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1474,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1480,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2448,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1221,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1344,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "_paused",
        "offset": 20,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 3290,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)2910_storage"
      },
      {
        "astId": 3292,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "maxNumberOfWhitelistedAddresses",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3294,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "numberOfAddressesWhitelisted",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3298,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "whitelistedAddresses",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3300,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "maxNFTLimit",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3302,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "maxNFTLimitWhitelist",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3304,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "nftMinted",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3321,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "i_mintFee",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3323,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "s_tokenCounter",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3328,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "s_tokenIdToBreed",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_enum(Selection)3273)"
      },
      {
        "astId": 3334,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "s_tokenURIs",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 3336,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "s_initialized",
        "offset": 0,
        "slot": "20",
        "type": "t_bool"
      },
      {
        "astId": 3340,
        "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
        "label": "s_requestIdToSender",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Selection)3273": {
        "encoding": "inplace",
        "label": "enum AbitoRandomNFTGenerator.Selection",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)840_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)840_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_enum(Selection)3273)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum AbitoRandomNFTGenerator.Selection)",
        "numberOfBytes": "32",
        "value": "t_enum(Selection)3273"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2910_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2909,
            "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)840_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 837,
            "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 839,
            "contract": "contracts/AbitoRandomNFTGenerator.sol:AbitoRandomNFTGenerator",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}